"""
Environment Setup Script for Finze Backend
Helps configure environment variables and dependencies
"""

import os
import json
import sys
from pathlib import Path

def setup_environment():
    """Setup environment variables for the backend"""
    print("🔧 Finze Backend Environment Setup")
    print("=" * 40)
    
    # Check if .env file exists
    env_file = Path(".env")
    env_vars = {}
    
    if env_file.exists():
        print("📄 Found existing .env file")
        with open(env_file, 'r') as f:
            for line in f:
                if '=' in line and not line.strip().startswith('#'):
                    key, value = line.strip().split('=', 1)
                    env_vars[key] = value
    else:
        print("📄 Creating new .env file")
    
    # Required environment variables
    required_vars = {
        'GEMINI_API_KEY': {
            'description': 'Google Gemini API key for receipt scanning',
            'instructions': 'Get from: https://makersuite.google.com/app/apikey',
            'required': True
        },
        'GOOGLE_APPLICATION_CREDENTIALS': {
            'description': 'Path to Firebase service account JSON file',
            'instructions': 'Download from Firebase Console > Project Settings > Service Accounts',
            'required': True
        },
        'MODEL_PATH': {
            'description': 'Path to AI categorization model',
            'default': 'models/expense_distilbert',
            'required': False
        },
        'PORT': {
            'description': 'Server port',
            'default': '8001',
            'required': False
        },
        'HOST': {
            'description': 'Server host',
            'default': '0.0.0.0',
            'required': False
        },
        'DEBUG': {
            'description': 'Debug mode (True/False)',
            'default': 'False',
            'required': False
        }
    }
    
    print("\n🔑 Environment Variables Configuration:")
    print("-" * 40)
    
    updated = False
    
    for var_name, config in required_vars.items():
        current_value = env_vars.get(var_name, os.getenv(var_name, ''))
        
        print(f"\n📋 {var_name}")
        print(f"   Description: {config['description']}")
        
        if 'instructions' in config:
            print(f"   Instructions: {config['instructions']}")
        
        if current_value:
            print(f"   Current value: {current_value}")
            if config.get('required', False):
                update = input("   Update this value? (y/N): ").lower().strip()
                if update == 'y':
                    new_value = input("   Enter new value: ").strip()
                    if new_value:
                        env_vars[var_name] = new_value
                        updated = True
            else:
                env_vars[var_name] = current_value
        else:
            if config.get('required', False):
                new_value = input("   Enter value (required): ").strip()
                while not new_value:
                    print("   ❌ This variable is required!")
                    new_value = input("   Enter value: ").strip()
                env_vars[var_name] = new_value
                updated = True
            else:
                default_value = config.get('default', '')
                new_value = input(f"   Enter value (default: {default_value}): ").strip()
                env_vars[var_name] = new_value if new_value else default_value
                updated = True
    
    # Save .env file
    if updated or not env_file.exists():
        print(f"\n💾 Saving configuration to .env file...")
        with open('.env', 'w') as f:
            f.write("# Finze Backend Environment Configuration\n")
            f.write("# Generated by setup script\n\n")
            
            for var_name, value in env_vars.items():
                f.write(f"{var_name}={value}\n")
        
        print("✅ Environment configuration saved!")
    
    # Validate Firebase credentials
    firebase_creds_path = env_vars.get('GOOGLE_APPLICATION_CREDENTIALS', '')
    if firebase_creds_path and not os.path.exists(firebase_creds_path):
        print(f"\n⚠️  Warning: Firebase credentials file not found: {firebase_creds_path}")
        print("   Make sure to download and place the service account JSON file in the specified location.")
    
    # Check Gemini API key format
    gemini_key = env_vars.get('GEMINI_API_KEY', '')
    if gemini_key and not gemini_key.startswith('AI'):
        print(f"\n⚠️  Warning: Gemini API key format may be incorrect.")
        print("   Gemini API keys typically start with 'AI'")
    
    print(f"\n🎉 Environment setup complete!")
    print(f"\n📋 Next Steps:")
    print(f"   1. Install dependencies: pip install -r requirements.txt")
    print(f"   2. Set up Firebase project and download service account key")
    print(f"   3. Get Gemini API key from Google AI Studio")
    print(f"   4. Run the server: python combined_server.py")
    
    return env_vars

def check_dependencies():
    """Check if all required dependencies are installed"""
    print("\n🔍 Checking Dependencies...")
    print("-" * 30)
    
    required_packages = [
        'flask',
        'flask_cors',
        'torch',
        'transformers',
        'scikit-learn',
        'pandas',
        'numpy',
        'requests',
        'PIL',  # Pillow
        'firebase_admin',
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
            print(f"✅ {package}")
        except ImportError:
            print(f"❌ {package} - Not installed")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n⚠️  Missing packages detected!")
        print(f"   Run: pip install -r requirements.txt")
        return False
    else:
        print(f"\n✅ All dependencies are installed!")
        return True

def create_firebase_config_template():
    """Create a template for Firebase configuration"""
    template = {
        "type": "service_account",
        "project_id": "your-project-id",
        "private_key_id": "your-private-key-id",
        "private_key": "-----BEGIN PRIVATE KEY-----\nyour-private-key\n-----END PRIVATE KEY-----\n",
        "client_email": "your-service-account@your-project.iam.gserviceaccount.com",
        "client_id": "your-client-id",
        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
        "token_uri": "https://oauth2.googleapis.com/token",
        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/your-service-account%40your-project.iam.gserviceaccount.com"
    }
    
    config_file = Path("firebase-service-account-template.json")
    if not config_file.exists():
        with open(config_file, 'w') as f:
            json.dump(template, f, indent=2)
        print(f"📄 Created Firebase config template: {config_file}")
        print(f"   Replace with your actual service account credentials")

def main():
    """Main setup function"""
    print("🚀 Welcome to Finze Backend Setup!")
    print("\nThis script will help you configure the backend server.")
    
    # Check current directory
    if not Path("combined_server.py").exists():
        print("❌ Error: This script must be run from the Backend directory")
        print("   containing 'combined_server.py'")
        sys.exit(1)
    
    # Setup environment
    env_vars = setup_environment()
    
    # Check dependencies
    deps_ok = check_dependencies()
    
    # Create Firebase template
    create_firebase_config_template()
    
    print("\n" + "=" * 50)
    if deps_ok:
        print("🎉 Setup complete! Your backend is ready to run.")
        print("\n🚀 To start the server:")
        print("   python combined_server.py")
    else:
        print("⚠️  Setup incomplete. Please install missing dependencies first.")
        print("\n📦 Install dependencies:")
        print("   pip install -r requirements.txt")
    
    print("\n📚 API Documentation will be available at:")
    print(f"   http://localhost:{env_vars.get('PORT', '8001')}/api/health")

if __name__ == "__main__":
    main()